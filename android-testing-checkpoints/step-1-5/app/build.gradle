apply plugin: 'com.android.application'

android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion

  defaultConfig {
    applicationId "com.example.android.testing.notes"
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode 1
    versionName "1.0"

    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
  }

  buildTypes {
    debug {
      // Run code coverage reports by default on debug builds.
       testCoverageEnabled = true
    }
  }

  // If you need to add more flavors, consider using flavor dimensions.
  flavorDimensions "default"

  productFlavors {
    mock {
      dimension "default"
      applicationIdSuffix = ".mock"
    }
    prod {
      dimension "default"
    }
  }

  // Remove mockRelease as it's not needed.
  android.variantFilter { variant ->
    if (variant.buildType.name.equals('release') && variant.getFlavors().
        get(0).name.
        equals('mock')) {
      variant.setIgnore(true);
    }
  }

  // Always show the result of every unit test, even if it passes.
  testOptions.unitTests.all {
    testLogging {
      events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
    }
  }
  buildToolsVersion '26.0.1'
}

/*
 Dependency versions are defined in the top level build.gradle file. This helps keeping track of
 all versions in a single place. This improves readability and helps managing project complexity.
 */
dependencies {
  // App's dependencies, including test
  implementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
  implementation "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
  implementation "com.android.support:design:$rootProject.supportLibraryVersion"
  implementation "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"
  implementation "com.android.support:support-v4:$rootProject.supportLibraryVersion"
  implementation "com.google.guava:guava:$rootProject.guavaVersion"
  implementation "com.github.bumptech.glide:glide:$rootProject.glideVersion"
  implementation "com.android.support.test.espresso:espresso-idling-resource:$rootProject.ext.espressoVersion"

  // Dependencies for local unit tests
  testImplementation "junit:junit:$rootProject.ext.junitVersion"
  testImplementation "org.mockito:mockito-all:$rootProject.ext.mockitoVersion"
  testImplementation "org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion"
  testImplementation "org.powermock:powermock-module-junit4:$rootProject.ext.powerMockito"
  testImplementation "org.powermock:powermock-api-mockito:$rootProject.ext.powerMockito"

  // Android Testing Support Library's runner and rules
  androidTestImplementation "com.android.support.test:runner:$rootProject.ext.runnerVersion"
  androidTestImplementation "com.android.support.test:rules:$rootProject.ext.rulesVersion"

  // Espresso UI Testing dependencies.
  androidTestImplementation "com.android.support.test.espresso:espresso-core:$rootProject.ext.espressoVersion"
  androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$rootProject.ext.espressoVersion"
  androidTestImplementation "com.android.support.test.espresso:espresso-intents:$rootProject.ext.espressoVersion"
}

/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/
configurations.all {
  resolutionStrategy.force "com.android.support:support-annotations:$rootProject.supportLibraryVersion"
}

/*
All direct/transitive dependencies shared between your test and production APKs need to be
excluded from the test APK! This is necessary because both APKs will contain the same classes. Not
excluding these dependencies from your test configuration will result in an dex pre-verifier error
at runtime. More info in this tools bug: (https://code.google.com/p/android/issues/detail?id=192497)
*/
configurations.compile.dependencies.each { compileDependency ->
  println "Excluding compile dependency: ${compileDependency.getName()}"
  configurations.androidTestCompile.dependencies.each { androidTestCompileDependency ->
    configurations.androidTestCompile.exclude module: "${compileDependency.getName()}"
  }
}
